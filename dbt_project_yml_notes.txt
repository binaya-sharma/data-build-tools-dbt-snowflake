
dbt_project.yml - Purpose
--------------------------------------------------------------------------------------------------------------------------------------------
Purpose:
- Tells dbt where to find your models.
- Applies configuration settings like materialized type (view, table, etc.).
- Helps organize your project by model folders (like staging, marts).

Basic Structure Example:

name: dbt_analytics
version: '1.0'
config-version: 2

model-paths: ["models"]
profile: snowflake_profile_name

models:
  dbt_analytics:
    staging:
      +materialized: view
    marts:
      +materialized: table

Explanation:
- 'dbt_analytics' must match the name of your project.
- 'staging' and 'marts' are folders inside the 'models' directory.
- '+materialized: view' means all .sql files inside 'staging' will create views in Snowflake.
- '+materialized: table' means all .sql files inside 'marts' will create tables in Snowflake.

Important Notes:
- If you do not mention folders in dbt_project.yml, dbt applies default behavior (views).
- Folder names must exactly match the actual folder names inside /models.
- Supported materializations: view, table, incremental, ephemeral.
- You can also apply other settings like warehouse, tags, and descriptions here.
- Changes here help control behavior of large dbt projects by folder.

Usage Tip:
- Always update dbt_project.yml when adding new folders like 'intermediate', 'core', etc.
- Helps keep model behavior consistent and organized.


-----------------------------------Folder Structure-----------------------------------**Important**-----------------------------------
Standard dbt Folder Structure with Comments

models/                       # Main folder for all dbt models and YAML schema files
  staging/                    # Staging models - typically raw data cleaning and formatting
    staging_model.sql         # Example staging model SQL file
    staging_schema.yml        # YAML file describing staging models, columns, and tests
  marts/                      # Data marts - business-level aggregated or curated models
    marts_model.sql           # Example marts model SQL file
    marts_schema.yml          # YAML file describing marts models, columns, and tests
  sources/                    # Source definitions for raw tables (external data)
    source_schema.yml         # YAML file describing sources and source-level tests

dbt_project.yml               # Main project configuration file

-- Example dbt_project.yml models config --

models:
  dbt_analytics:                     # Project folder name
    staging:                         # Subfolder for staging
      +materialized: view            # Build all staging models as views
      snowflake_warehouse: dbt_wh    # Warehouse for staging models
    marts:                           # Subfolder for marts
      +materialized: table           # Build marts models as tables
      snowflake_warehouse: dbt_wh    # Warehouse for marts models

# Notes:
# - YAML files describing models/(e.g., staging, marts) can be inside **any models** subfolder.
# - All folders must be listed under 'models:' in dbt_project.yml to be recognized.
# - Organize YAML files logically by layer or function for easier maintenance.

----------------------------------------------------------------------------------------------------------------------------------------
Singular Test vs Granular Test in dbt

1. Singular Test:
   - Defined as a single SQL file (.sql) under the 'tests/' directory.
   - Contains custom SQL logic to check a specific condition.
   - Returns rows that violate the test condition.
   - Used for complex or unique test scenarios not covered by generic tests.
   - Example:
       -- tests/positive_order_amount.sql
       SELECT *
       FROM {{ ref('fct_orders') }}
       WHERE order_amount <= 0
   - If any row is returned, test fails.

2. Granular Test (Generic Test):
   - Defined in YAML schema files under 'models/' or subfolders.
   - Uses pre-built dbt test types like unique, not_null, relationships, accepted_values.
   - Applied at column or table level.
   - Easier to write and maintain for common data quality checks.
   - Example in YAML:
       models:
         - name: fct_orders
           columns:
             - name: order_key
               tests:
                 - unique
                 - not_null

Summary:
- Singular test = Custom SQL test files for specific complex checks.
- Granular test = YAML-defined tests using dbt's built-in generic tests.
- Both are important for data quality and serve different purposes.

--------------------------------------------------------------------------------------------------------------------------------------------
dbt Seeds: 

- Seeds are **CSV files** (comma-separated values).
- Usually stored in the `data/` folder of the dbt project.
- Used to load static, small reference data or lookup tables.
- Example: countries.csv, product_categories.csv
- Seeds are NOT SQL files.
- dbt loads seed CSV files into database tables during `dbt seed` command.
- Seeds are easy way to manage small datasets inside dbt without external dependencies.

Summary:
- Seeds = CSV files, NOT SQL.
- Use seeds for small static **lookup/reference** data.

-------------------------------------------------------------------------------------------------------------------------------------------
Limitations of DBT

- DBT focuses only on data transformation (T in ELT), not on data extraction or loading.
- It does not support complex operations like UPSERT, MERGE, or DELETE directly.
- Limited to SQL-based transformations and Jinja macros; no support for procedural languages.
- Does not manage orchestration or workflow scheduling natively (needs tools like Airflow).
- Testing is mostly limited to data quality and schema checks, no end-to-end testing.
- Dependency on the underlying data warehouse features and SQL dialect support.
- No native support for streaming or real-time data processing.
- Debugging complex logic can be harder due to templating and compilation steps.
- Managing large-scale projects requires strict organization and version control discipline.

--------------------------------------------------------------------------------------------------------------------------------------------
** Please refer to the documentation; it has everything. This is just for quick reference.

