
dbt_project.yml - Purpose
-------------------------
Purpose:
- Tells dbt where to find your models.
- Applies configuration settings like materialized type (view, table, etc.).
- Helps organize your project by model folders (like staging, marts).

Basic Structure Example:

name: dbt_analytics
version: '1.0'
config-version: 2

model-paths: ["models"]
profile: snowflake_profile_name

models:
  dbt_analytics:
    staging:
      +materialized: view
    marts:
      +materialized: table

Explanation:
- 'dbt_analytics' must match the name of your project.
- 'staging' and 'marts' are folders inside the 'models' directory.
- '+materialized: view' means all .sql files inside 'staging' will create views in Snowflake.
- '+materialized: table' means all .sql files inside 'marts' will create tables in Snowflake.

Important Notes:
- If you do not mention folders in dbt_project.yml, dbt applies default behavior (views).
- Folder names must exactly match the actual folder names inside /models.
- Supported materializations: view, table, incremental, ephemeral.
- You can also apply other settings like warehouse, tags, and descriptions here.
- Changes here help control behavior of large dbt projects by folder.

Usage Tip:
- Always update dbt_project.yml when adding new folders like 'intermediate', 'core', etc.
- Helps keep model behavior consistent and organized.


-----------------------------------Folder Structure-----------------------------------**Important**-----------------------------------
Standard dbt Folder Structure with Comments

models/                       # Main folder for all dbt models and YAML schema files
  staging/                    # Staging models - typically raw data cleaning and formatting
    staging_model.sql         # Example staging model SQL file
    staging_schema.yml        # YAML file describing staging models, columns, and tests
  marts/                      # Data marts - business-level aggregated or curated models
    marts_model.sql           # Example marts model SQL file
    marts_schema.yml          # YAML file describing marts models, columns, and tests
  sources/                    # Source definitions for raw tables (external data)
    source_schema.yml         # YAML file describing sources and source-level tests

dbt_project.yml               # Main project configuration file

-- Example dbt_project.yml models config --

models:
  dbt_analytics:                     # Project folder name
    staging:                         # Subfolder for staging
      +materialized: view            # Build all staging models as views
      snowflake_warehouse: dbt_wh    # Warehouse for staging models
    marts:                           # Subfolder for marts
      +materialized: table           # Build marts models as tables
      snowflake_warehouse: dbt_wh    # Warehouse for marts models

# Notes:
# - YAML files describing models/(e.g., staging, marts) can be inside any models subfolder.
# - All folders must be listed under 'models:' in dbt_project.yml to be recognized.
# - Organize YAML files logically by layer or function for easier maintenance.

